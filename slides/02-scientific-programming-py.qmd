---
title: "Introduction to HPC"
subtitle: "Scientific Programming with Python"

author:
  - name: Manuel Holtgrewe
    orcid: 0000-0002-3051-1763
    affiliations:
      - ref: bihealth
affiliations:
  - id: bihealth
    name: Berlin Institute of Health at Charité
    address: Charitéplatz 1,
    postal-code: 10117
    city: Berlin
    country: Germany
title-slide-attributes:
  data-background-size: contain
  data-background-image: themes/bih/bih_bg_logo.png
format:
  revealjs:
    theme:
      - default
      - themes/bih/theme.scss
    slide-number: true
    navigation-mode: linear
    controls-layout: bottom-right
    controls-tutorial: false
    smaller: true
    self-contained: true
    # Override default "normal" size to get 16:9 aspect ratio.
    width: 1200
    height: 675
    margin: 0.05
    # Enable local plugins.
    revealjs-plugins:
      - plugins/fullscreen
---

## Session Overview

__Aims__

- Learn about important applications for Python in scientific programming ...
- ... in the biomedical/life sciences.

__Considered Applications__

- "Data ~~science~~ wrangling" with [polars](https://www.pola.rs/)
- Fast numerical computations with SciPy/Numpy
- Interfacing with R for Statistics
- Machine learning with [scikit-learn](https://scikit-learn.org/)
- Deep Learning with Tensorflow

## Jupyter Notebooks {.inverse background-color="#70ADC1"}

- Introduction
- Installation and Usage

## Introduction

:::: {.columns}

::: {.column width="50%"}

- Jupyter Notebooks are a web-based interactive computing environment
    - Jupyter Lab is the next generation
- You edit **cells** with python code which is executed in a **kernel**
- It's best explained by example ;-)

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/wikipedia-jupyter-notebook.png)

:::

::::

## Installation

- Jupyter is installed as a Python module.
- To install it locally with conda

  ```bash
  mamba create -y -n jupyter-example jupyterlab
  conda activate jupyter-example
  jupyter lab # OR: jupyter notebook
  # OUTPUT:
  ...
  http://127.0.0.1:8888/?token=a5eea49bec7cd70538c21e947e2de596a3ab66b39506ee72
  ...
  ```

- [More Kernels](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels) available
    - Bash
    - R
    - Julia
    - ...

## Using Jupyter (1)

:::: {.columns}

::: {.column width="50%"}

- There is no magic!
- Packages can be installed in the conda environment (or via pip)
    - `mamba install -y plotly_express`
- The kernel keeps the current state
    - To ensure that you have a clean state
    - restart kernel and rerun all cells
- Bonus: `ipython` is a turbo-charged interpreter on the command line
- Useful: Markdown cells for documentation

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/jupyter-lab-plotly.png)

:::

::::

## Using Jupyter (2)

:::: {.columns}

::: {.column width="50%"}

**Jupyter Lab vs. Notebook**

- Originally: `ipython` notebook
- Jupyter Notebook: single file
- Jupyter Lab: IDE-like, terminal, ...

:::

::: {.column width="50%"}

**Remarks**

- `.ipynb` files are JSON files
- They contain all code but also all output and log output (stderr)
- To clear all output: `jupyter nbconvert --clear-output --to notebook --output=OUTPUT INPUT.ipynb`

:::

::::

## Using Jupyter (3)

**Advantages**

- Really nice to try out things interactively
- Excellent for interactive data analysis / visualization

**Drawbacks**

- Code cannot be reused (use Python modules for this)
- Version control with Git feasible but not ideal

## Using Jupyter on the HPC

- Super easy to get started locally!
- Also easy to launch a job on the HPC, but ...
    - how to connect to its web interface?
- Options:
    - SSH tunneling
    - Open OnDemand Portal ([hpc-portal.cubi.bihealth.org](https://hpc-portal.cubi.bihealth.org))

## Data Wrangling with Polars {.inverse background-color="#70ADC1"}

- Introduction
- Loading and Writing Data
- "Tidy Data" with Polars
- Data Visualization

## Introduction

:::: {.columns}

::: {.column width="50%"}

**What is Polars?**

- Polars is a DataFrame library for Python (written in Rust)
    - `mamba install -y polars`
- It is (almost a) drop-in replacement for Pandas
- Think "super-fast R-like data frames in Python"
    - also available for Rust, R, NodeJS
- [Python Documentation](https://pola-rs.github.io/polars/py-polars/html/reference/index.html)

:::

::: {.column width="50%"}

**Polars vs. Pandas**

- Pandas is the original library and _de-facto_ standard
- Nobody is particularly happy with Pandas (including its author)
    - In particular with **Pandas indexing**
- Polars is a new library that tries to fix several issues
    - Polars has no indexing ;-)

:::

::::

## Loading and Writing Data (1)

```
In [1]: import polars as pl
   ...: iris_data = pl.read_csv("https://gist.githubusercontent.com/netj/8836201/raw/6f9306ad21398ea43cba4f7d537619d0e07d5ae3/iris.csv")
   ...: iris_data.head()
Out[1]:
shape: (5, 5)
┌──────────────┬─────────────┬──────────────┬─────────────┬─────────┐
│ sepal.length ┆ sepal.width ┆ petal.length ┆ petal.width ┆ variety │
│ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---     │
│ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str     │
╞══════════════╪═════════════╪══════════════╪═════════════╪═════════╡
│ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ Setosa  │
│ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ Setosa  │
│ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ Setosa  │
│ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ Setosa  │
│ 5.0          ┆ 3.6         ┆ 1.4          ┆ 0.2         ┆ Setosa  │
└──────────────┴─────────────┴──────────────┴─────────────┴─────────┘
```

## Loading and Writing Data (2)

```
In [2]: iris_data.write_csv("/tmp/out.tsv", separator="\t")

In [3]: with open("/tmp/out.tsv") as inputf:
   ...:     print(inputf.readline())
   ...:     print(inputf.readline())
   ...:
sepal.length    sepal.width     petal.length    petal.width     variety

5.1     3.5     1.4     0.2     Setosa


```

## Tidy Data with Polars (1)

- Hadley Wickham wrote a whole [paper about tidy data](https://vita.had.co.nz/papers/tidy-data.pdf) - he is probably the "most influential R guy"
- Tidy data is a way to organize data in a tabular format
    - each variable is a column
    - each observation is a row
    - each type of observational unit is a table
- This section is based on [Kevin Heavey's M"Modern Polars"](https://kevinheavey.github.io/modern-polars/tidy.html)

## Tidy Data with Polars (2)

Original data:

```
date,away_team,away_points,home_team,home_points
"Fri, Apr 1, 2016",Philadelphia 76ers,91,Charlotte Hornets,100
"Fri, Apr 1, 2016",Dallas Mavericks,98,Detroit Pistons,89
"Fri, Apr 1, 2016",Brooklyn Nets,91,New York Knicks,105
"Fri, Apr 1, 2016",Cleveland Cavaliers,110,Atlanta Hawks,108
"Fri, Apr 1, 2016",Toronto Raptors,99,Memphis Grizzlies,95
```

## Tidy Data with Polars (3)

Load and clean the data.

```python
import polars as pl
games_pl = (
    pl.read_csv("nba.csv")
    .filter(~pl.all(pl.all().is_null()))
    .with_columns(
        pl.col("date").str.strptime(pl.Date, "%a, %b %d, %Y"),
    )
    .sort("date")
    .with_row_count("game_id")
)
games_pl.head()
```

Output

```
┌─────────┬────────────┬─────────────────────┬─────────────┬───────────────────┬─────────────┐
│ game_id ┆ date       ┆ away_team           ┆ away_points ┆ home_team         ┆ home_points │
│ ---     ┆ ---        ┆ ---                 ┆ ---         ┆ ---               ┆ ---         │
│ u32     ┆ date       ┆ str                 ┆ i64         ┆ str               ┆ i64         │
╞═════════╪════════════╪═════════════════════╪═════════════╪═══════════════════╪═════════════╡
│ 0       ┆ 2016-04-01 ┆ Philadelphia 76ers  ┆ 91          ┆ Charlotte Hornets ┆ 100         │
│ 1       ┆ 2016-04-01 ┆ Dallas Mavericks    ┆ 98          ┆ Detroit Pistons   ┆ 89          │
│ 2       ┆ 2016-04-01 ┆ Brooklyn Nets       ┆ 91          ┆ New York Knicks   ┆ 105         │
│ 3       ┆ 2016-04-01 ┆ Cleveland Cavaliers ┆ 110         ┆ Atlanta Hawks     ┆ 108         │
│ 4       ┆ 2016-04-01 ┆ Toronto Raptors     ┆ 99          ┆ Memphis Grizzlies ┆ 95          │
└─────────┴────────────┴─────────────────────┴─────────────┴───────────────────┴─────────────┘
```

## Data Operations

- Polars (just as Pandas and Hadley's tidyverse for R) has a rich set of operations
    - [Cheat Sheet](https://franzdiebold.github.io/polars-cheat-sheet/Polars_cheat_sheet.pdf)
    - `pivot` - "long" to "wide" format
    - `melt` - "wide" to "long" format
    - `join` - join two tables
    - ... much more!
- Suggested exercise for later:
    - Go through [Tidy data section of Modern Polars](https://kevinheavey.github.io/modern-polars/tidy.html)
    - Try to setup a new conda environment, launch Jupyter through OnDemand Portal, go through the steps

## Data Visualization (1)

:::: {.columns}

::: {.column width="50%"}

- **Plotly Express** is a high-level plotting library for Python
    - It is based on [Plotly](https://plotly.com/python/) which is more low-level
    - This is really nice to create interactive plots!
- Suggested exercise for later:
    - Go through [Plotly Express Tutorial](https://plotly.com/python/plotly-express/)
    - Again, try it in Jupyter via OnDemand Portal

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/plotly-express-example.png)

:::

::::

## Data Visualization (2)

:::: {.columns}

::: {.column width="50%"}

- **Vega** is a *declarative language* for data visualization
    - It is used by [Altair](https://altair-viz.github.io/) which is a Python library
    - It is also used by [Vega Lite](https://vega.github.io/vega-lite/) which is a JavaScript library
    - Vega Lite is used by [Voyager](https://vega.github.io/voyager/) which is a web-based data exploration tool
- This is more advanced but also very powerful
    - [Here are the official tutorials](https://vega.github.io/vega/tutorials/)

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/vega-altair-example.png)

:::

::::

## Data Visualization (3)

:::: {.columns}

::: {.column width="50%"}

- **Bokeh** is a Python library for interactive data visualization
    - An alternative to Plotly Express
- [Here are the official tutorials](https://mybinder.org/v2/gh/bokeh/bokeh-notebooks/master?filepath=tutorial%2F00%20-%20Introduction%20and%20Setup.ipynb)

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/bokeh-example.png)

:::

::::

## Data Visualization (4)

- **Matplotlib** is the "original" plotting library for Python
    - it offers pretty low-level plotting functions only
    - [Seaborn](https://seaborn.pydata.org/) adds higher level plotting functions
- [Here is the matplotlib tutorial](https://matplotlib.org/stable/tutorials/index.html)
- Historically, it can be seen as part of the "MATLAB functionality for Python" effort
    - 1995 NumPy: fast numerics for Python
    - 2001 SciPy: scientific functions for Python, builds on NumPy
    - 2003 Matplotlib: plotting for Python, builds on NumPy

## Conversion Between Polars and Pandas (1)

- why
- install dependencies

## Conversion Between Polars and Pandas (2)

- example code & explanation

## Conversion Between Polars and Pandas (3)

- example code & explanation

## Numerical Computation with SciPy/NumPy {.inverse background-color="#70ADC1"}

- Introduction
- Input and Output
- Arrays and Shapes
- Vectorized Operations

## Introduction to SciPy/NumPy

:::: {.columns}

::: {.column width="50%"}

**NumPy**

- Numerical computing data structures
    - high-performance vectors/matrices
- Numerical computing algorithms
    - vectorized operations, random numbers ...
    - linear algebra

:::

::: {.column width="50%"}

**SciPy**

- Fundamental scientific algorithms
    - clustering
    - interpolation / smoothing
    - statistics
    - sparse matrices
    - image and signal processing
    - FFT, integration

:::

::::

👉 Mostly low level characteristics, many other libraries build on top.

## Input and Output

- numpy array files
- compression
- more than one array

## Arrays and Shapes

- vectors
- matrices
- data types

## Vectorized Operations (1)

Example

## Vectorized Operations (2)

Benchmark vs. Python List

## Interfacing with R for Statistics {.inverse background-color="#70ADC1"}

- Introduction
- Low-Level Approaches
- Using `rpy2`

## Introduction

- why?
- how?

## Low-Level Approaches

- via disk
- call R scripts from Python

## Using `rpy2` (1)

data transfer vs pandas and data frames

## Using `rpy2` (2)

Some examples:

- Student's t-test
- Kolmogorov-Smirnov test
- Fisher test

## Using `rpy2` (3)

- Data frame operations

## Using `rpy2` (4)

- dplyr & tidyr

## Using `rpy2` (5)

- ggplot2

## Using `rpy2` (6)

- RMagics

## Machine Learning `scikit-learn` {.inverse background-color="#70ADC1"}

- Introduction
- Estimator Cheat Sheet
- Example: Clustering
- Example: Regression
- Example: Classification

## Introduction

## Estimator Cheat Sheet

## Example: Clustering

## Example: Regression

## Example: Classification

- Introduction
- Installation
- "TensorFlow 2 Quickstart for Beginners"
- Running on the HPC

## Introduction

## Installation

## "TensorFlow 2 Quickstart for Beginners"

https://www.tensorflow.org/tutorials/quickstart/beginner

## Running on the HPC

## Deep Learning with Tensorflow {.inverse background-color="#70ADC1"}

## Bring Your Own Project {.inverse background-color="#70ADC1"}

🫵 Where can you apply what you have learned in your PhD project?

## This is not the end...

... but all for this session

__Recap__

- Overview of Python in scientific programming
- Data wrangling with Polars
- Numerical computations with SciPy/NumPy
- Interfacing with R for Statistics
- Machine Learning with `scikit-learn`
- Deep Learning with Tensorflow
