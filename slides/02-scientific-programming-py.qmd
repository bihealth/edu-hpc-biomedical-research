---
title: "Introduction to HPC"
subtitle: "Scientific Programming with Python"

author:
  - name: Manuel Holtgrewe
    orcid: 0000-0002-3051-1763
    affiliations:
      - ref: bihealth
affiliations:
  - id: bihealth
    name: Berlin Institute of Health at CharitÃ©
    address: CharitÃ©platz 1,
    postal-code: 10117
    city: Berlin
    country: Germany
title-slide-attributes:
  data-background-size: contain
  data-background-image: themes/bih/bih_bg_logo.png
format:
  revealjs:
    theme:
      - default
      - themes/bih/theme.scss
    slide-number: true
    navigation-mode: linear
    controls-layout: bottom-right
    controls-tutorial: false
    smaller: true
    self-contained: true
    # Override default "normal" size to get 16:9 aspect ratio.
    width: 1200
    height: 675
    margin: 0.05
    # Enable local plugins.
    revealjs-plugins:
      - plugins/fullscreen
---

## Session Overview

__Aims__

- Learn about important applications for Python in scientific programming ...
- ... in the biomedical/life sciences.

__Considered Applications__

- "Data ~~science~~ wrangling" with [polars](https://www.pola.rs/)
- Fast numerical computations with SciPy/Numpy
- Interfacing with R for Statistics
- Machine learning with [scikit-learn](https://scikit-learn.org/)
- Deep Learning with Tensorflow

## Jupyter Notebooks {.inverse background-color="#70ADC1"}

- Introduction
- Installation and Usage

## Introduction

:::: {.columns}

::: {.column width="50%"}

- Jupyter Notebooks are a web-based interactive computing environment
    - Jupyter Lab is the next generation
- You edit **cells** with python code which is executed in a **kernel**
- It's best explained by example ;-)

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/wikipedia-jupyter-notebook.png)

:::

::::

## Installation

- Jupyter is installed as a Python module.
- To install it locally with conda

  ```bash
  mamba create -y -n jupyter-example jupyterlab
  conda activate jupyter-example
  jupyter lab # OR: jupyter notebook
  # OUTPUT:
  ...
  http://127.0.0.1:8888/?token=a5eea49bec7cd70538c21e947e2de596a3ab66b39506ee72
  ...
  ```

- [More Kernels](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels) available
    - Bash
    - R
    - Julia
    - ...

## Using Jupyter (1)

:::: {.columns}

::: {.column width="50%"}

- There is no magic!
- Packages can be installed in the conda environment (or via pip)
    - `mamba install -y plotly_express`
- The kernel keeps the current state
    - To ensure that you have a clean state
    - restart kernel and rerun all cells
- Bonus: `ipython` is a turbo-charged interpreter on the command line
- Useful: Markdown cells for documentation

:::

::: {.column width="50%"}

![](img/02-scientific-programming-py/jupyter-lab-plotly.png)

:::

::::

## Using Jupyter (2)

:::: {.columns}

::: {.column width="50%"}

**Jupyter Lab vs. Notebook**

- Originally: `ipython` notebook
- Jupyter Notebook: single file
- Jupyter Lab: IDE-like, terminal, ...

:::

::: {.column width="50%"}

**Remarks**

- `.ipynb` files are JSON files
- They contain all code but also all output and log output (stderr)
- To clear all output: `jupyter nbconvert --clear-output --to notebook --output=OUTPUT INPUT.ipynb`

:::

::::

## Using Jupyter (3)

**Advantages**

- Really nice to try out things interactively
- Excellent for interactive data analysis / visualization

**Drawbacks**

- Code cannot be reused (use Python modules for this)
- Version control with Git feasible but not ideal

## Using Jupyter on the HPC

- Super easy to get started locally!
- Also easy to launch a job on the HPC, but ...
    - how to connect to its web interface?
- Options:
    - SSH tunneling
    - Open OnDemand Portal ([hpc-portal.cubi.bihealth.org](https://hpc-portal.cubi.bihealth.org))

## Data Wrangling with Polars {.inverse background-color="#70ADC1"}

- Introduction
- Loading and Writing Data
- "Tidy Data" with Polars
- Data Visualization

## Introduction

- Polars features
- Polars vs pandas

## Loading and Writing Data (1)

Loading Data

## Loading and Writing Data (2)

Writing Data

## Tidy Data with Polars (1)

What is tidy data?

R tidyverse

## Tidy Data with Polars (2)

tidypolars

## Data Visualization (1)

Plotly Express

## Data Visualization (2)

Vega

## Data Visualization (3)

Bokeh

## Data Visualization (4)

**It's quite intimidating. How to get started.**

- Use the galleries/examples!
- [Plotly Express Examples](https://plotly.com/python/plotly-express/)
- [Vega Lite Gallery](https://vega.github.io/vega-lite/examples/)
- [Bokeh Gallery](https://docs.bokeh.org/en/latest/docs/gallery.html)

## Conversion Between Polars and Pandas (1)

- why
- install dependencies

## Conversion Between Polars and Pandas (2)

- example code & explanation

## Conversion Between Polars and Pandas (3)

- example code & explanation

## Numerical Computation with SciPy/NumPy {.inverse background-color="#70ADC1"}

- Introduction
- Input and Output
- Arrays and Shapes
- Vectorized Operations

## Introduction to SciPy/NumPy

:::: {.columns}

::: {.column width="50%"}

**NumPy**

- Numerical computing data structures
    - high-performance vectors/matrices
- Numerical computing algorithms
    - vectorized operations, random numbers ...
    - linear algebra

:::

::: {.column width="50%"}

**SciPy**

- Fundamental scientific algorithms
    - clustering
    - interpolation / smoothing
    - statistics
    - sparse matrices
    - image and signal processing
    - FFT, integration

:::

::::

ðŸ‘‰ Mostly low level characteristics, many other libraries build on top.

## Input and Output

- numpy array files
- compression
- more than one array

## Arrays and Shapes

- vectors
- matrices
- data types

## Vectorized Operations (1)

Example

## Vectorized Operations (2)

Benchmark vs. Python List

## Interfacing with R for Statistics {.inverse background-color="#70ADC1"}

- Introduction
- Low-Level Approaches
- Using `rpy2`

## Introduction

- why?
- how?

## Low-Level Approaches

- via disk
- call R scripts from Python

## Using `rpy2` (1)

data transfer vs pandas and data frames

## Using `rpy2` (2)

Some examples:

- Student's t-test
- Kolmogorov-Smirnov test
- Fisher test

## Using `rpy2` (3)

- Data frame operations

## Using `rpy2` (4)

- dplyr & tidyr

## Using `rpy2` (5)

- ggplot2

## Using `rpy2` (6)

- RMagics

## Machine Learning `scikit-learn` {.inverse background-color="#70ADC1"}

- Introduction
- Estimator Cheat Sheet
- Example: Clustering
- Example: Regression
- Example: Classification

## Introduction

## Estimator Cheat Sheet

## Example: Clustering

## Example: Regression

## Example: Classification

- Introduction
- Installation
- "TensorFlow 2 Quickstart for Beginners"
- Running on the HPC

## Introduction

## Installation

## "TensorFlow 2 Quickstart for Beginners"

https://www.tensorflow.org/tutorials/quickstart/beginner

## Running on the HPC

## Deep Learning with Tensorflow {.inverse background-color="#70ADC1"}

## Bring Your Own Project {.inverse background-color="#70ADC1"}

ðŸ«µ Where can you apply what you have learned in your PhD project?

## This is not the end...

... but all for this session

__Recap__

- Overview of Python in scientific programming
- Data wrangling with Polars
- Numerical computations with SciPy/NumPy
- Interfacing with R for Statistics
- Machine Learning with `scikit-learn`
- Deep Learning with Tensorflow
